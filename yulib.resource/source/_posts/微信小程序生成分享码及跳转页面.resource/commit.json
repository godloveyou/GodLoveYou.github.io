{"compress":true,"commitItems":[["509a60b3-b0b7-452e-9ce9-26dd9d79cd08",1572587527613,"---\ntitle:微信生成小程序码的两种方式(可带参数)\ncategories: 微信小程序\ntags: 分享码\n---\n\n\n### 1.小程序码介绍\n小程序开发文档:[https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html)\n\n微信小程序 允许开发者生成跳转到某个页面的小程序码, 在用户扫码后跳转到指定页面时，也可以附加参数,附加的参数在小程序端可以获取到\n\n从微信小程序开发文档上我们可以了解到，目前微信支持两种二维码（左），小程序码和小程序二维码（右）。官方推荐使用小程序码，因为小程序码具有更好的辨识度。\n\n![img](https://upload-images.jianshu.io/upload_images/9135319-53e020b5833bc17d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1116/format/webp)\n\n官方提供生成小程序码的两种方式 \n\n方式一： 适用于 **需要的码的数量相对较少的业务场景,通过该接口生成的小程序码，有数量限制,永久有效**，(这种方式不能附带额外的自定义参数) \n\n![mark](http://blog.sjjtcloud.com/blog/20191101/ImDmWeP34i1f.png?imageslim)\n\n* 接口地址: https://api.weixin.qq.com/wxa/getwxacode?access_token=ACCESS_TOKEN\n\n* 具体参数参考微信官方文档:\n[https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html]\n\n\n\n方式二: 适用于使用数量极多的场景（可以附带额外的自定义参数）。\n![mark](http://blog.sjjtcloud.com/blog/20191101/vShaY0JQCeGi.png?imageslim)\n\n* 接口地址：https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=ACCESS_TOKEN\n\n* 具体参数参考微信官方文档：[https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html)\n\n注意: \n 两种方式均需要获取 ACCESS_TOEKN，微信提供的开发者工具中也 可以在线获取，[https://mp.weixin.qq.com/debug/](https://mp.weixin.qq.com/debug/)\n\n\n### 2. 后台获取小程序码DEMO（演示第一种获取方式,生成的二维码扫码后直接跳转到指定页面）\n```java\npublic class HttpUtilTest {\n    public static void main(String[] args) {\n        String token = \"27_b7dbAFkuHIrKjeiYA05TOYoMlgD723P_lfMZwfhofQA_FcpXXZ3thuLOUmyFy9OZH9nXMvgMjm683SzVJa0w2MshxZ2TGT90aY7H2IxEdwtdLQoY4srLv3vbMZgZOVgAIATIP\";\n        //使用第一种 获取方式获取小程序码\n  String url = \"https://api.weixin.qq.com/wxa/getwxacode?access_token=\"+token;\n        Map<String,Object> data = new HashMap<String,Object>();\n        Map<String,Object> color = new HashMap<>();\n        data.put(\"path\",\"pages/quickly/quickly\");\n        data.put(\"auto_color\",false);\n        data.put(\"width\",450);\n        color.put(\"r\",0);\n        color.put(\"g\",0);\n        color.put(\"b\",0);\n        data.put(\"line_color\",color);\n        HttpRequest request = HttpUtil.createPost(url);\n        request.body(JSONUtil.toJsonStr(data));\n        HttpResponse response = request.execute();\n        //请求接口返回的图片的字节码，直接写入本地文件就可以\n        byte[] imgBytes = response.bodyBytes();\n        try {\n            OutputStream outputStream = new FileOutputStream(new File(\"h:/jumpToQuick.jpg\"));\n            IoUtil.write(outputStream,true,imgBytes);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n\n### 3.前端请求获取小程序码\n因为第二中方法可生成的小程序码极多，所以我们一般会使用这种方法来获取小程序码。  今天主要像大家介绍一下第二种方法。\n\n一般我们主要常用的参数是：scene（如果需要页面参数）、page和width。  page是页面地址，例如：'pages/index'。**pages前面不能有斜杠**  scene是参数，为字符串。比如要传入一个用户id=1234，要根据这个用户id来给当前页面返回不同的内容，那么scene参数就可以写成\"1234\"，多个参数按一定规则分开，如&符号，第二个参数是recommendId=123则可以这样写\"1234&123\"。我们来开一下代码：\n```javascript\n  Page({\n   data:{},\n   getQrcode(){\n   wx.request({\n   url: \"https://www....com/weixin/get-qrcode\",//域名省略\n   data: {\n   page:\"pages/index\",\n   scene:\"1234&123\",\n   width:300\n   },\n   header: {\n   'content-type': 'application/x-www-form-urlencoded'\n   },\n   method:  'POST',\n   dataType: 'json',\n   success: function(res){\n   let qrcodeUrl=res.data;//服务器小程序码地址\n   },\n   fail: function(){},\n   complete: options.complete || function(){}\n   })\n   }\n  })\n```\n\n\n\n解析：get-qrcode接口是自己小程序后端的接口，前端调用此接口，传入相应参数，后台通过参数请求小程序接口获取到小程序码存到自己服务上，返回小程序码服务器地址。\n\n\n### 3.用户扫码进入后的逻辑\n\n我们可以在onload生命周期中处理参数\n\nonLoad:function(options){\n if(options.scene){\n let scene=decodeURIComponent(options.scene);\n //&是我们定义的参数链接方式\n let userId=scene.split(\"&\")[0];\n let recommendId=scene.split('&')[1];\n //其他逻辑处理。。。。。\n }\n}\n\n",[[1572587506189,["david@DESKTOP-9844NL4",[[-1,40,": "]],[42,42],[40,40]]],[1572587507395,["david@DESKTOP-9844NL4",[[1,40,": "]],[40,40],[42,42]]],[1572587512193,["david@DESKTOP-9844NL4",[[1,0,"\n"]],[0,0],[1,1]]],[1572587513068,["david@DESKTOP-9844NL4",[[-1,0,"\n"]],[1,1],[0,0]]],[1572587515602,["david@DESKTOP-9844NL4",[[-1,63,"\n"]],[63,63],[62,62]]],[1572587516057,["david@DESKTOP-9844NL4",[[-1,62,"\n"]],[62,62],[61,61]]],[1572587528165,["david@DESKTOP-9844NL4",[[-1,0,"---\ntitle:微信生成小程序码的两种方式(可带参数)\ncategories: 微信小程序\ntags: 分享码\n---"]],[0,61],[0,0]]],[1572587529781,["david@DESKTOP-9844NL4",[[-1,0,"\n"]],[1,1],[0,0]]],[1572587530944,["david@DESKTOP-9844NL4",[[1,0,"\n"]],[0,0],[1,1]]],[1572587531798,["david@DESKTOP-9844NL4",[[1,0,"---\ntitle: No space left on device问题解决\ncategories: linux\ntags: centos\n---"]],[0,0],[73,73]]],[1572587535377,["david@DESKTOP-9844NL4",[[-1,11,"No space left on device问题解决"]],[11,38],[11,11]]],[1572587535615,["david@DESKTOP-9844NL4",[[1,11,"w"]],[11,11],[12,12]]],[1572587536134,["david@DESKTOP-9844NL4",[[-1,11,"w"]],[12,12],[11,11]]],[1572587544166,["david@DESKTOP-9844NL4",[[1,11,"微信小程序生成分享码"]],[11,11],[21,21]]],[1572587549324,["david@DESKTOP-9844NL4",[[-1,34,"linux"],[1,39,"小程序"]],[34,34],[37,37]]],[1572587554446,["david@DESKTOP-9844NL4",[[-1,44,"centos"],[1,50,"小程序"]],[44,44],[47,47]]],[1572587638820,["david@DESKTOP-9844NL4",[[-1,431,"img"],[1,434,"mark"],[-1,440,"s"],[-1,444,"upload-images.jianshu.io/up"],[1,471,"blog.sjjtcloud.com/b"],[-1,473,"ad_ima"],[-1,480,"es"],[1,483,"201"],[-1,485,"35319-53e020b5833bc17d"],[1,507,"101/VrrAc4pUi9ik"],[-1,517,"Mogr2/auto-orient/strip%7C"],[1,543,"sl"],[-1,545,"ageView2/2/w/1116/format/webp"]],[429,575],[504,504]]]],null,"david@DESKTOP-9844NL4"]]}